{"version":3,"sources":["components/NavigationComponent.jsx","images/bubbleSort.png","images/insertionSort.png","images/selectionSort.png","components/HomeComponent.jsx","components/InputSetFormComponent.jsx","components/BubbleSortComponent.jsx","components/InsertionSortComponent.jsx","components/SelectionSortComponent.jsx","components/BinaryTree.js","components/BinarySearchTree.jsx","App.js","index.js"],"names":["NavigationComponent","props","useState","isOpen","setIsOpen","Navbar","dark","expand","className","NavbarBrand","to","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","HomeComponent","Container","Row","Col","Card","inverse","style","backgroundColor","borderColor","CardImg","top","width","src","bubble","alt","CardBody","CardTitle","tag","CardText","Button","color","insertion","selection","React","Component","InputSetFormComponent","state","inputSet","speed","handleInputChange","bind","handleSubmit","event","this","setState","target","name","value","parentStateSetter","preventDefault","Form","onSubmit","FormGroup","Label","for","Input","type","id","onChange","defaultValue","BubbleSortComponent","initialColor","c","push","array","staticArray","stateSetter","newState","split","length","map","Number","play","i","clearInterval","slice","len","bigArray","colorArray","cl","bigcolorArray","g","r","t","counter","counter2","setInterval","rows","row","k","j","temp","Alert","data","labels","datasets","label","borderWidth","sm","size","offset","options","animation","duration","scales","yAxes","ticks","beginAtZero","InsertionSortComponent","Math","random","SelectionSortComponent","s","p","Node","left","right","height","BinaryTree","insert","node","pointer","root","BinarySearchTree","nodes","search","tree","forEach","element","queue","prestatetree","flag","tempqueue","console","log","pow","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0d4503c1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavLink,\n  NavItem,\n} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\n\nconst NavigationComponent = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar dark expand=\"md\" className=\"px-5 bg-1\">\n        <NavbarBrand>\n          <Link className=\"text-light\" to=\"/\">\n            Alstack\n          </Link>\n        </NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink>\n                <Link className=\"text-light\" to=\"/\">\n                  Home\n                </Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link className=\"text-light\" to=\"/bubbleSort\">\n                  Bubble Sort\n                </Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link className=\"text-light\" to=\"/insertionSort\">\n                  {\" \"}\n                  Insertion Sort\n                </Link>\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink>\n                <Link className=\"text-light\" to=\"/selectionSort\">\n                  Selection Sort\n                </Link>{\" \"}\n              </NavLink>\n            </NavItem>\n            {/* <NavItem>\n              <NavLink>\n                {\" \"}\n                <Link className=\"text-light\" to=\"/binarySearchTree\">\n                  Binary Search Tree\n                </Link>{\" \"}\n              </NavLink>\n            </NavItem> */}\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n};\n\nexport default NavigationComponent;\n","export default __webpack_public_path__ + \"static/media/bubbleSort.2f5cfd3b.png\";","export default __webpack_public_path__ + \"static/media/insertionSort.d92889b5.png\";","export default __webpack_public_path__ + \"static/media/selectionSort.d0e0a55c.png\";","import React from 'react';\nimport { Card, CardImg, CardText, CardBody, CardTitle, Button, Container, Row, Col } from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport bubble from '../images/bubbleSort.png';\nimport insertion from '../images/insertionSort.png';\nimport selection from '../images/selectionSort.png';\n\nclass HomeComponent extends React.Component {\n    render() {\n        return (\n            <div>\n                <Container className=\"my-5\">\n                    <Row className=\"py-5\">\n                        <Col className=\"col-12 col-lg-4 mb-4\">\n                            <Card inverse style={{ backgroundColor: '#272727', borderColor: '#272727' }}>\n                                <CardImg top width=\"100%\" src={bubble} alt=\"Bubble Sort Image\" />\n                                <CardBody>\n                                    <CardTitle tag=\"h5\">Bubble Sort</CardTitle>\n                                    <CardText>How does this naive algorithm works???</CardText>\n                                    <Link to=\"/bubbleSort\"><Button color=\"success\">Let's see</Button></Link>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col className=\"col-12 col-lg-4 mb-4\">\n                            <Card inverse style={{ backgroundColor: '#272727', borderColor: '#272727' }}>\n                                <CardImg top width=\"100%\" src={insertion} alt=\"Insertion Sort Image\" />\n                                <CardBody>\n                                    <CardTitle tag=\"h5\">Inertion Sort</CardTitle>\n                                    <CardText>Check out the working of this algorithm?</CardText>\n                                    <Link to=\"/insertionSort\"><Button color=\"success\">Let's see</Button></Link>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col className=\"col-12 col-lg-4 mb-4\">\n                            <Card inverse style={{ backgroundColor: '#272727', borderColor: '#272727' }}>\n                                <CardImg top width=\"100%\" src={selection} alt=\"Selection Sort Image\" />\n                                <CardBody>\n                                    <CardTitle tag=\"h5\">Selection Sort</CardTitle>\n                                    <CardText>How does a selection sort operate?</CardText>\n                                    <Link to=\"/selectionSort\"><Button color=\"success\">Let's see</Button></Link>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default HomeComponent;\n","import React from 'react';\nimport { Form, FormGroup, Input, Button, Label  } from 'reactstrap';\n\nclass InputSetFormComponent extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        this.state = { \n            inputSet: \"7,6,5,4,3,2,1\",\n            speed: 5\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(event) {\n\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    handleSubmit(event) {\n        this.props.parentStateSetter(this.state)\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n\n            <Form onSubmit={this.handleSubmit}>\n                <FormGroup>\n                    <Label style={{ color: '#dddddd' }} for=\"inputSet\">Enter the comma separated Array</Label>\n                    <Input\n                        style={{ borderColor: \"#272727\", backgroundColor: '#272727', color: '#dddddd' }}\n                        type=\"text\"\n                        name=\"inputSet\"\n                        id=\"inputSet\"\n                        value={this.state.inputSet}\n                        onChange={this.handleInputChange}\n                    />\n                </FormGroup>\n                <FormGroup>\n                    <Label style={{ color: '#dddddd' }} for=\"speed\">Speed</Label>\n                    <Input \n                        style={{ borderColor: \"#272727\", backgroundColor: '#272727', color: '#dddddd' }}\n                        type=\"select\" \n                        defaultValue=\"5\" \n                        name=\"speed\" \n                        id=\"speed\" \n                        onChange={this.handleInputChange}\n                    >\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option value=\"5\">5</option>\n                        <option>6</option>\n                        <option>7</option>\n                        <option>8</option>\n                        <option>9</option>\n                        <option>10</option>\n                    </Input>\n                </FormGroup>\n                <FormGroup>\n                    <Button color=\"success\" type=\"submit\">Play</Button>\n                </FormGroup>\n            </Form>\n        );\n    }\n}\n\nexport default InputSetFormComponent;","import React from 'react';\nimport InputSetFormComponent from './InputSetFormComponent';\nimport { Container, Row, Col, Alert } from 'reactstrap';\nimport { Bar } from 'react-chartjs-2';\n\nclass BubbleSortComponent extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        let initialColor = [];\n        for (let c = 0; c < 10; c++) initialColor.push('#b26fff');\n        this.state = {\n            array: [7, 6, 5, 4, 3, 2, 1],\n            staticArray: [7, 6, 5, 4, 3, 2, 1],\n            speed: 5,\n            color: initialColor\n        };\n        this.stateSetter = this.stateSetter.bind(this);\n    }\n\n    stateSetter(newState) {\n        let initialColor = [];\n        for (let c = 0; c < newState.inputSet.split(',').length; c++) initialColor.push('#b26fff');\n        this.setState({\n            array: newState.inputSet.split(',').map(Number),\n            staticArray: newState.inputSet.split(',').map(Number),\n            speed: newState.speed,\n            color: initialColor\n        }, () => {\n            this.play();\n        });\n    }\n\n    play() {\n\n        for (var i = 0; i <= 100; i++) clearInterval(i);\n        let speed = this.state.speed;\n        let array = this.state.array.slice(0);\n        let len = array.length;\n        let bigArray = [array.slice(0)];\n        let colorArray = [];\n        for (let cl = 0; cl < len; cl++) {\n            if (cl === 0) colorArray.push('#00fd4cd7');\n            else if (cl === 1) colorArray.push('#00fd4cd7');\n            else colorArray.push('#b26fff');\n        }\n        let bigcolorArray = [colorArray.slice(0)];\n        for (let cl = 0; cl < len && cl < 2; cl++) {\n            if (cl === 0) colorArray[0] = '#b26fff';\n            else if (cl === 1) colorArray[0] = '#b26fff';\n        }\n        for (let g = 0; g < len; g++) {\n\n            for (let r = 0; r < len - 1 - g; r++) {\n\n                if (array[r] > array[r + 1]) {\n\n                    let t = array[r];\n                    array[r] = array[r + 1];\n                    array[r + 1] = t;\n                }\n                colorArray[r + 1] = '#00fd4cd7';\n                colorArray[r + 2] = '#00fd4cd7';\n                bigArray.push(array.slice(0));\n                bigcolorArray.push(colorArray.slice(0));\n                colorArray = [];\n                for (let cl = 0; cl < len; cl++) {\n\n                    colorArray.push('#b26fff');\n                }\n            }\n        }\n        colorArray = [];\n        for (let c = 0; c < len; c++) colorArray.push('#b26fff');\n        bigcolorArray.push(colorArray.slice(0));\n        let counter = 0;\n        let counter2 = 0;\n        if (speed < 6)\n            setInterval(() => {\n                if (counter < bigcolorArray.length) this.setState({ color: bigcolorArray[counter++] });\n                if (counter2 < bigArray.length) this.setState({ array: bigArray[counter2++]});\n            }, (6 - speed) * 1000);\n\n        else\n            setInterval(() => {\n                if (counter < bigcolorArray.length) this.setState({ color: bigcolorArray[counter++] });\n                if (counter2 < bigArray.length) this.setState({ array: bigArray[counter2++]});\n            }, (11 - speed) * 100);\n    }\n\n    render() {\n\n        let rows = [];\n        if (this.state.array.length <= 15) {\n            let row = [];\n            let array = this.state.staticArray.slice(0);\n            let length = array.length;\n            for (let cl = 0; cl < length; cl++) row.push(<Col key={cl + 1} className=\"p-2 bg-1 border border-dark\">{ array[cl] }</Col>);\n            rows.push(<Row key={0} className=\"m-2 border border-dark\">{ row.slice(0) }</Row>)\n            for (let i = 0, k = 1000; i < length; i++) {\n\n                for (let j = 0; j < length - i - 1; j++) {\n\n                    row = [];\n                    if (array[j] > array[j + 1]) {\n\n                        let temp = array[j];\n                        array[j] = array[j + 1];\n                        array[j + 1] = temp;\n                        for (let c = 0; c < length; c++) {\n                            if(c === j) row.push(<Col key={c + 100} className=\"p-2 border bgc-18 border-dark\">{ array[c] }</Col>);\n                            else if(c === j + 1) row.push(<Col key={c + 100} className=\"p-2 border bgc-19 border-dark\">{ array[c] }</Col>);\n                            else row.push(<Col key={c + 100} className=\"p-2 border bg-1 border-dark\">{ array[c] }</Col>);\n                        } \n                        rows.push(<Row key={k++} className=\"m-2 border border-dark\">{ row.slice(0) }</Row>);\n                    }\n                }\n            }\n        }\n        else {\n            rows = (<Alert color=\"dark\">We can't render this section for more than 15 numbers</Alert>)\n        } \n\n        const data = {\n            labels: this.state.array,\n            datasets: [\n                {\n                    label: this.state.array.length + ' Elements',\n                    data: this.state.array,\n                    borderWidth: 1,\n                    backgroundColor: this.state.color\n                },\n            ]\n        }\n\n        const options = {\n            animation: {\n                duration: 0\n            },\n            scales: {\n                yAxes: [\n                    {\n                        ticks: {\n                            beginAtZero: true,\n                        },\n                    },\n                ],\n            }\n        }\n\n        return (\n\n            <div>\n                <Container className=\"my-5\">\n                    <Row>\n                        <Col className=\"text-center m-2\">\n                            <h4 className=\"text-1\">Bubble Sort</h4>\n                        </Col>\n                    </Row>\n                    <Row className=\"my-3\">\n                        <Col className=\"mt-4\">\n                            <InputSetFormComponent parentStateSetter={this.stateSetter} />\n                        </Col>\n                        <Col sm={{ size: 8, offset: 1 }}>\n                            <Bar data={data} options={options} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"m-5\">\n                            {rows}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default BubbleSortComponent;\n","import React from 'react';\nimport InputSetFormComponent from './InputSetFormComponent';\nimport { Container, Row, Col, Alert } from 'reactstrap';\nimport { Bar } from 'react-chartjs-2';\n\nclass InsertionSortComponent extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        let initialColor = [];\n        for (let c = 0; c < 10; c++) initialColor.push('#b26fff');\n        this.state = {\n            array: [7, 6, 5, 4, 3, 2, 1],\n            staticArray: [7, 6, 5, 4, 3, 2, 1],\n            speed: 5,\n            color: initialColor\n        };\n        this.stateSetter = this.stateSetter.bind(this);\n    }\n\n    stateSetter(newState) {\n        let initialColor = [];\n        for (let c = 0; c < newState.inputSet.split(',').length; c++) initialColor.push('#b26fff');\n        this.setState({\n            array: newState.inputSet.split(',').map(Number),\n            staticArray: newState.inputSet.split(',').map(Number),\n            speed: newState.speed,\n            color: initialColor\n        }, () => {\n            this.play();\n        });\n    }\n\n    play() {\n        for (var i = 0; i <= 100; i++) clearInterval(i);\n        let speed = this.state.speed;\n        let array = this.state.array.slice(0);\n        let len = array.length;\n        let bigArray = [array.slice(0)];\n        let colorArray = [];\n        for (let cl = 0; cl < len; cl++) {\n            if (cl === 0) colorArray.push('#00fd4cd7');\n            else colorArray.push('#b26fff');\n        }\n        let bigcolorArray = [colorArray.slice(0)];\n        for (let cl = 0; cl < len && cl < 2; cl++) {\n            if (cl === 0) colorArray[0] = '#b26fff';\n            else if (cl === 1) colorArray[0] = '#b26fff';\n        }\n        for (let i = 1; i < len; i++) {\n\n            let k = array[i];\n            for (let j = i - 1; j >= 0 && k < array[j]; j--) {\n\n                let t = array[j];\n                array[j] = array[j + 1];\n                array[j + 1] = t;\n                colorArray[j] = '#00fd4cd7';\n                bigArray.push(array.slice(0));\n                bigcolorArray.push(colorArray.slice(0));\n                colorArray = [];\n                for (let cl = 0; cl < len; cl++) {\n\n                    colorArray.push('#b26fff');\n                }\n            }\n        }\n        for (let c = 0; c < len; c++) colorArray.push('#b26fff');\n        bigcolorArray.push(colorArray.slice(0));\n        let counter = 0;\n        let counter2 = 0;\n        if (speed < 6)\n            setInterval(() => {\n                if (counter < bigcolorArray.length) this.setState({ color: bigcolorArray[counter++] });\n                if (counter2 < bigArray.length) this.setState({ array: bigArray[counter2++]});\n            }, (6 - speed) * 1000);\n\n        else\n            setInterval(() => {\n                if (counter < bigcolorArray.length) this.setState({ color: bigcolorArray[counter++] });\n                if (counter2 < bigArray.length) this.setState({ array: bigArray[counter2++]});\n            }, (11 - speed) * 100);\n    }\n\n    render() {\n\n        let rows = [];\n        if (this.state.array.length <= 15) {\n            let row = [];\n            let array = this.state.staticArray.slice(0);\n            let length = array.length;\n            for (let cl = 0; cl < length; cl++) row.push(<Col key={cl*19-7-Math.random()*Math.random() + 1} className=\"p-2 bg-1 border border-dark\">{array[cl]}</Col>);\n            rows.push(<Row key={length*99-Math.random()-67*Math.random()*Math.random()} className=\"m-2 border border-dark\">{row.slice(0)}</Row>)\n            for (let i = 1; i < length; i++) {\n\n                let k = array[i];\n                row = [];\n                for (let c = 0; c < length; c++) {\n                    if (c === i) row.push(<Col key={i*c+Math.random()*Math.random() - i+c} className=\"p-2 border bgc-18 border-dark\">{array[c]}</Col>);\n                    else row.push(<Col key={i*c+Math.random() - i+c} className=\"p-2 border bg-1 border-dark\">{array[c]}</Col>);\n                }\n                rows.push(<Row key={k*Math.random()*Math.random() + 1} className=\"m-2 border border-dark\">{row.slice(0)}</Row>);\n                for (let j = i - 1; j >= 0 && k < array[j]; j--) {\n\n                    row = [];\n                    let t = array[j];\n                    array[j] = array[j + 1];\n                    array[j + 1] = t;\n                    for (let c = 0; c < length; c++) {\n                        if (c === j) row.push(<Col key={i*Math.random()*Math.random()- j+c} className=\"p-2 border bgc-18 border-dark\">{array[c]}</Col>);\n                        else row.push(<Col key={i*j*Math.random()-Math.random() - i+j+c} className=\"p-2 border bg-1 border-dark\">{array[c]}</Col>);\n                    }\n                    rows.push(<Row key={k*t-Math.random()+Math.random() + k+t} className=\"m-2 border border-dark\">{row.slice(0)}</Row>);\n                }\n            }\n        }\n        else {\n            rows = (<Alert color=\"dark\">We can't render this section for more than 15 numbers</Alert>)\n        }\n\n        const data = {\n            labels: this.state.array,\n            datasets: [\n                {\n                    label: this.state.array.length + ' Elements',\n                    data: this.state.array,\n                    borderWidth: 1,\n                    backgroundColor: this.state.color\n                },\n            ]\n        }\n\n        const options = {\n            animation: {\n                duration: 0\n            },\n            scales: {\n                yAxes: [\n                    {\n                        ticks: {\n                            beginAtZero: true,\n                        },\n                    },\n                ],\n            }\n        }\n\n        return (\n\n            <div>\n                <Container className=\"my-5\">\n                    <Row>\n                        <Col className=\"text-center m-2\">\n                            <h4 className=\"text-1\">Insertion Sort</h4>\n                        </Col>\n                    </Row>\n                    <Row className=\"my-3\">\n                        <Col className=\"mt-4\">\n                            <InputSetFormComponent parentStateSetter={this.stateSetter} />\n                        </Col>\n                        <Col sm={{ size: 8, offset: 1 }}>\n                            <Bar data={data} options={options} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"m-5\">\n                            {rows}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default InsertionSortComponent;\n","import React from 'react';\nimport InputSetFormComponent from './InputSetFormComponent';\nimport { Container, Row, Col, Alert } from 'reactstrap';\nimport { Bar } from 'react-chartjs-2';\n\nclass SelectionSortComponent extends React.Component {\n\n    constructor(props) {\n\n        super(props);\n        let initialColor = [];\n        for (let c = 0; c < 10; c++) initialColor.push('#b26fff');\n        this.state = {\n            array: [7, 6, 5, 4, 3, 2, 1],\n            staticArray: [8, 7, 6, 5, 4, 3, 2, 1],\n            speed: 5,\n            color: initialColor\n        };\n        this.stateSetter = this.stateSetter.bind(this);\n    }\n\n    stateSetter(newState) {\n        let initialColor = [];\n        for (let c = 0; c < newState.inputSet.split(',').length; c++) initialColor.push('#b26fff');\n        this.setState({\n            array: newState.inputSet.split(',').map(Number),\n            staticArray: newState.inputSet.split(',').map(Number),\n            speed: newState.speed,\n            color: initialColor\n        }, () => {\n            this.play();\n        });\n    }\n\n    play() {\n        for (var i = 0; i <= 100; i++) clearInterval(i);\n        let speed = this.state.speed;\n        let array = this.state.array.slice(0);\n        let len = array.length;\n        let bigArray = [array.slice(0)];\n        let colorArray = [];\n        for (let cl = 0; cl < len; cl++) {\n            if (cl === 0) colorArray.push('#00fd4cd7');\n            else colorArray.push('#b26fff');\n        }\n        let bigcolorArray = [colorArray.slice(0)];\n        for (let cl = 0; cl < len && cl < 2; cl++) {\n            if (cl === 0) colorArray[0] = '#b26fff';\n            else if (cl === 1) colorArray[0] = '#b26fff';\n        }\n        for (let i = 0; i < len; i++) {\n\n            let s = array[i], p = i;\n            for (let j = i + 1; j < len; j++) {\n                if (array[j] < s) {\n                    s = array[j];\n                    p = j;\n                }\n                colorArray[p] = '#00fd4cd7';\n                bigArray.push(array.slice(0));\n                bigcolorArray.push(colorArray.slice(0));\n                colorArray = [];\n                for (let cl = 0; cl < len; cl++) {\n    \n                    colorArray.push('#b26fff');\n                }\n            }\n            let t = array[i];\n            array[i] = array[p];\n            array[p] = t;\n            if(i === len - 1) {\n                \n                colorArray[p] = '#00fd4cd7';\n                bigArray.push(array.slice(0));\n                bigcolorArray.push(colorArray.slice(0));\n                colorArray = [];\n                for (let cl = 0; cl < len; cl++) {\n                    colorArray.push('#b26fff');\n                }\n            }\n        }\n        for (let c = 0; c < len; c++) colorArray.push('#b26fff');\n        bigcolorArray.push(colorArray.slice(0));\n        let counter = 0;\n        let counter2 = 0;\n        if (speed < 6)\n            setInterval(() => {\n                if (counter < bigcolorArray.length) this.setState({ color: bigcolorArray[counter++] });\n                if (counter2 < bigArray.length) this.setState({ array: bigArray[counter2++] });\n            }, (6 - speed) * 1000);\n\n        else\n            setInterval(() => {\n                if (counter < bigcolorArray.length) this.setState({ color: bigcolorArray[counter++] });\n                if (counter2 < bigArray.length) this.setState({ array: bigArray[counter2++] });\n            }, (11 - speed) * 100);\n    }\n\n    render() {\n\n        let rows = [];\n        if (this.state.array.length <= 15) {\n            rows = []\n            let row = [];\n            let array = this.state.staticArray.slice(0);\n            let length = array.length;\n            for (let cl = 0; cl < length; cl++) row.push(<Col key={cl*19-7-Math.random()*Math.random() + 1} className=\"p-2 bg-1 border border-dark\">{array[cl]}</Col>);\n            rows.push(<Row key={length*99-Math.random()-67*Math.random()*Math.random()} className=\"m-2 border border-dark\">{row.slice(0)}</Row>)\n            for (let i = 0; i < length - 1; i++) {\n\n                let s = array[i], p = i;\n                let k = array[i];\n                row = [];\n                for (let j = i + 1; j < length; j++) {\n                    if (array[j] < s) {\n                        s = array[j];\n                        p = j;\n                    }\n                }\n                let t = array[i];\n                array[i] = array[p];\n                array[p] = t;\n                for (let c = 0; c < length; c++) {\n                    if (c === i) row.push(<Col key={i*c+Math.random()*Math.random() - i+c} className=\"p-2 border bgc-18 border-dark\">{array[c]}</Col>);\n                    else if (c === p) row.push(<Col key={i*c+Math.random() - i+c} className=\"p-2 border bgc-19 border-dark\">{array[c]}</Col>);\n                    else row.push(<Col key={i*c+Math.random() - i+c} className=\"p-2 border bg-1 border-dark\">{array[c]}</Col>);\n                }\n                rows.push(<Row key={k*Math.random()*Math.random() + 1} className=\"m-2 border border-dark\">{row.slice(0)}</Row>);\n            }\n        }\n        else {\n            rows = (<Alert color=\"dark\">We can't render this section for more than 15 numbers</Alert>)\n        }\n\n        const data = {\n            labels: this.state.array,\n            datasets: [\n                {\n                    label: this.state.array.length + ' Elements',\n                    data: this.state.array,\n                    borderWidth: 1,\n                    backgroundColor: this.state.color\n                },\n            ]\n        }\n\n        const options = {\n            animation: {\n                duration: 0\n            },\n            scales: {\n                yAxes: [\n                    {\n                        ticks: {\n                            beginAtZero: true,\n                        },\n                    },\n                ],\n            }\n        }\n\n        return (\n\n            <div>\n                <Container className=\"my-5\">\n                    <Row>\n                        <Col className=\"text-center m-2\">\n                            <h4 className=\"text-1\">Selection Sort</h4>\n                        </Col>\n                    </Row>\n                    <Row className=\"my-3\">\n                        <Col className=\"mt-4\">\n                            <InputSetFormComponent parentStateSetter={this.stateSetter} />\n                        </Col>\n                        <Col sm={{ size: 8, offset: 1 }}>\n                            <Bar data={data} options={options} />\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col className=\"m-5\">\n                            {rows}\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default SelectionSortComponent;\n","class Node {\n    constructor(value, left, right) {\n        this.value = value;\n        this.left = left;\n        this.right = right;\n        this.height = 0;\n    }\n}\n\nclass BinaryTree {\n    constructor() {\n        this.root = new Node(null, null, null);\n    }\n    insert = (value) => {\n        let node = new Node(value, null, null);\n        let pointer = this.root;\n        if (!pointer.value) { pointer.value = value; this.height = 0 }\n        else while (pointer.left || pointer.right) {\n            if (pointer.value > node.value) {\n                if (!pointer.left) {\n                    pointer.left = node;\n                    if (!pointer.right) this.height += 1;\n                }\n                else pointer = pointer.left;\n            }\n            else if (pointer.value < node.value) {\n                if (!pointer.right) {\n                    pointer.right = node;\n                    if (!pointer.left) this.height += 1;\n                }\n                else pointer = pointer.right;\n            }\n        }\n        if (pointer.value > node.value) {\n            if (!pointer.left) {\n                pointer.left = node;\n                if (!pointer.right) this.height += 1;\n            }\n            else pointer = pointer.left;\n        }\n        else if (pointer.value < node.value) {\n            if (!pointer.right) {\n                pointer.right = node;\n                if (!pointer.left) this.height += 1;\n            }\n            else pointer = pointer.right;\n        }\n    }\n}\n\nexport default BinaryTree;","import { useState } from \"react\";\nimport BinaryTree from \"./BinaryTree.js\";\n\nconst BinarySearchTree = () => {\n\n    const initialState = {\n        nodes: \"50,25,75,12,38,62,88,6,18,32,44,56,68,81,93,3,9,15,21,29,35,41,47,53,59,65,71,78,84,90,96,2,5,8,11,14,17,20,23,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,77,80,83,86,89,92,95,98\",\n        search: 5,\n        speed: 5,\n        tree: [],\n        height: 0,\n    }\n\n    const [state, setState] = useState(initialState);\n\n    const inputHandler = (event) =>\n        setState({ ...state, [event.target.name]: event.target.value });\n\n    const draw = () => {\n        let nodes = state.nodes.split(\",\").map(Number);\n        let tree = new BinaryTree();\n        nodes.forEach(element => {\n            tree.insert(element);\n        });\n        let queue = [], prestatetree = [];\n        queue.push(tree.root);\n        let flag = true;\n        while (flag) {\n            flag = false;\n            let temp = [];\n            for (let i = 0; i < queue.length; i++) {\n                const element = queue[i];\n                if (element) {\n                    temp.push(element.value);\n                }\n                else {\n                    temp.push(element);\n                }\n            }\n            prestatetree.push(temp.slice(0));\n            let tempqueue = queue.slice(0);\n            queue = [];\n            for (let i = 0; i < tempqueue.length; i++) {\n                const element = tempqueue[i];\n                if (element) {\n                    queue.push(element.left);\n                    queue.push(element.right);\n                    flag = true;\n                }\n                else {\n                    queue.push(null);\n                    queue.push(null);\n                }\n            }\n        }\n        setState({ ...state, tree: prestatetree.slice(0), height: tree.height });\n    }\n\n    const play = () => {\n        console.log(state.tree);\n    }\n\n    return (\n        <div className=\"container-fluid\">\n            <div className=\"row\">\n                <div className=\"col text-center py-4\">\n                    <h4 className=\"text-1\">Binary Search Tree</h4>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col text-light d-flex justify-content-around\">\n                    <label>Nodes: <input name=\"nodes\" className=\"mx-4\" defaultValue={state.nodes} onChange={inputHandler}></input></label>\n                    <label>Node to Search: <input name=\"search\" type=\"number\" className=\"mx-4\" defaultValue={state.search}></input></label>\n                    <label>Speed:\n                        <select name=\"speed\" type=\"select\" className=\"mx-4\" defaultValue={state.speed}>\n                            <option value=\"1\">1</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                            <option value=\"7\">7</option>\n                            <option value=\"8\">8</option>\n                            <option value=\"9\">9</option>\n                            <option value=\"10\">10</option>\n                        </select>\n                    </label>\n                    <button className=\"btn btn-success\" onClick={draw}>Generate Tree</button>\n                    <button className=\"btn btn-success\" onClick={play}>Play</button>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"tree col pt-5 mt-5\" style={{ width: `${30 * Math.pow(2, (state.height - 1))}px` }}>\n                    {state.tree.map((element, i) => {\n                        if (i < state.tree.length - 1)\n                            return <div key={i} className=\"py-4 treerow d-flex justify-content-around\">\n                                {element.map((node, i) => {\n                                    return <div key={i} className=\"node d-flex justify-content-center align-items-center\">{node ? node : \"\"}</div>\n                                })}\n                            </div>\n                    })}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default BinarySearchTree;","import React from 'react';\nimport NavigationComponent from './components/NavigationComponent';\nimport HomeComponent from './components/HomeComponent';\nimport BubbleSortComponent from './components/BubbleSortComponent';\nimport InsertionSortComponent from './components/InsertionSortComponent';\nimport SelectionSortComponent from './components/SelectionSortComponent';\nimport BinarySearchTree from './components/BinarySearchTree';\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App bg-black\">\n          <NavigationComponent />\n          <Switch>\n            <Route exact path=\"/\" component={HomeComponent} />\n            <Route path=\"/bubbleSort\" component={BubbleSortComponent} />\n            <Route path=\"/insertionSort\" component={InsertionSortComponent} />\n            <Route path=\"/selectionSort\" component={SelectionSortComponent} />\n            <Route path=\"/binarySearchTree\" component={BinarySearchTree} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}